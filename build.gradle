//
// ============================================================================
// (C) Copyright Schalk W. Cronje 2013-2015
//
// This software is licensed under the Apache License 2.0
// See http://www.apache.org/licenses/LICENSE-2.0 for license details
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.
//
// ============================================================================
//


// PLEASE NOTE: Integration Tests and Gradle Compatibility tests download a number of files.

plugins {
    id 'com.gradle.build-scan' version '2.2.1'
    id 'groovy'
    id 'maven'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.9.9'
    id 'com.github.hierynomus.license' version '0.12.1'
    id 'org.ysb33r.gradletest' version '2.0-rc.4'
    id 'org.ysb33r.os' version '0.9'
}

buildScan {
    termsOfServiceUrl   = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

apply from: 'gradle/integration-tests.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    ivyVersion = '2.4.0'
    groovyLongVer = GroovySystem.version
    groovyShortVer = GroovySystem.version.replaceAll(/\.\d+$/, '')
}

apply from: 'gradle/ivyAntVersions.gradle'

repositories {
    jcenter()
}

configurations {
    spock
    ivy

    testCompile.extendsFrom spock
    integrationTestCompile.extendsFrom spock
    remoteTestCompile.extendsFrom spock
}

dependencies {
    spock "org.spockframework:spock-core:1.2-groovy-${groovyShortVer}", {
        exclude module: 'groovy-all'
        exclude group: 'org.codehaus.groovy'
    }

    compileOnly "org.apache.ivy:ivy:${ivyVersion}"
    compile 'org.ysb33r.gradle:grolifant:0.12.1'
    compile gradleApi()
    compile localGroovy()

    testCompile 'org.slf4j:slf4j-api:1.7.13'
    testCompile 'org.slf4j:slf4j-simple:1.7.13'

    integrationTestCompile gradleTestKit()

    remoteTestCompile localGroovy()
    remoteTestRuntime "org.codehaus.groovy:groovy-ant:${groovyLongVer}"
    remoteTestRuntime "org.apache.ivy:ivy:${ivyVersion}"
}

tasks.withType(Test) {
    if (gradle.startParameter.isOffline()) {
        systemProperties OFFLINE: 1
    }
}


processResources {
    from generateIvyAntVersions, {
        into 'META-INF'
    }
}

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = false
    mapping {
        groovy = 'DOUBLESLASH_STYLE'
    }
    ext.year = '2013-2019'
    excludes([
            '**/*.ad',
            '**/*.asciidoc',
            '**/*.adoc',
            '**/*.md',
            '**/*.properties',
            '**/*.dsl.groovySpec.groovy',
            '**/*.dsl.kotlinSpec.groovy',
    ])
}

pluginBundle {
    description = 'A plugin that keeps a local repository for offline of isolated environments'
    website = 'https://github.com/ysb33r/ivypot-gradle-plugin'
    vcsUrl = 'https://github.com/ysb33r/ivypot-gradle-plugin.git'

    tags = ['repositoryManagement', 'repositories']

    plugins {
        ivypotPlugin {
            id = 'org.ysb33r.ivypot'
            displayName = 'Plugin for maintaining an offline respository'
        }
        binaryPotBasePlugin {
            id = 'org.ysb33r.ivypot.binary.base'
            displayName = 'Plugin that allows specification of arbitrary binaries to be cached by the ivypot plugin'
        }
    }

    mavenCoordinates {
        groupId = project.group
        artifactId = 'ivypot'
    }
}

publishPlugins {
    group 'release'
    onlyIf { !version.endsWith("SNAPSHOT") }
    mustRunAfter build
}

gradleTest {
    versions '6.1'
    versions '5.4.1'
    versions '5.0'

    inputs.files jar

    beforeTest {
        println "  ${it.name}"
    }

    if (OS.windows) {
        gradleArguments '-g', file("${buildDir}/gradleTest/userHome").absolutePath.replaceAll(~$/\\/$, '/')
    }

    mustRunAfter test, integrationTest, remoteTest
}

task release {
    group 'release'
    description 'Life-cycle task for releasing the plugin'
    dependsOn build, publishPlugins
}

pluginManager.withPlugin('idea') {
    tasks.ideaModule.dependsOn processResources
}
